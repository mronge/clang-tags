./tut01
./tut02 input01.c
typedef 'typedef'
char 'char'
star '*'
identifier '__builtin_va_list'
semi ';'
int 'int'
identifier 'main'
l_paren '('
r_paren ')'
l_brace '{'
int 'int'
identifier 'a'
equal '='
numeric_constant '4'
plus '+'
numeric_constant '5'
semi ';'
int 'int'
identifier 'b'
equal '='
input01.c:5:13: warning: "/*" within block comment
  /* Nested /* comments */ 12; // are handled correctly
            ^
numeric_constant '12'
semi ';'
int 'int'
identifier 'c'
equal '='
numeric_constant '12'
semi ';'
r_brace '}'
eof ''
./tut03 input03.c
typedef 'typedef'
char 'char'
star '*'
identifier '__builtin_va_list'
semi ';'
typedef 'typedef'
signed 'signed'
char 'char'
identifier '__int8_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
char 'char'
identifier '__uint8_t'
semi ';'
typedef 'typedef'
short 'short'
identifier '__int16_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
short 'short'
identifier '__uint16_t'
semi ';'
typedef 'typedef'
int 'int'
identifier '__int32_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
int 'int'
identifier '__uint32_t'
semi ';'
typedef 'typedef'
long 'long'
long 'long'
identifier '__int64_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
long 'long'
long 'long'
identifier '__uint64_t'
semi ';'
typedef 'typedef'
long 'long'
identifier '__darwin_intptr_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
int 'int'
identifier '__darwin_natural_t'
semi ';'
typedef 'typedef'
int 'int'
identifier '__darwin_ct_rune_t'
semi ';'
typedef 'typedef'
union 'union'
l_brace '{'
char 'char'
identifier '__mbstate8'
l_square '['
numeric_constant '128'
r_square ']'
semi ';'
long 'long'
long 'long'
identifier '_mbstateL'
semi ';'
r_brace '}'
identifier '__mbstate_t'
semi ';'
typedef 'typedef'
identifier '__mbstate_t'
identifier '__darwin_mbstate_t'
semi ';'
typedef 'typedef'
int 'int'
identifier '__darwin_ptrdiff_t'
semi ';'
typedef 'typedef'
long 'long'
unsigned 'unsigned'
int 'int'
identifier '__darwin_size_t'
semi ';'
typedef 'typedef'
identifier '__builtin_va_list'
identifier '__darwin_va_list'
semi ';'
typedef 'typedef'
int 'int'
identifier '__darwin_wchar_t'
semi ';'
typedef 'typedef'
identifier '__darwin_wchar_t'
identifier '__darwin_rune_t'
semi ';'
typedef 'typedef'
int 'int'
identifier '__darwin_wint_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
long 'long'
identifier '__darwin_clock_t'
semi ';'
typedef 'typedef'
identifier '__uint32_t'
identifier '__darwin_socklen_t'
semi ';'
typedef 'typedef'
long 'long'
identifier '__darwin_ssize_t'
semi ';'
typedef 'typedef'
long 'long'
identifier '__darwin_time_t'
semi ';'
struct 'struct'
identifier '__darwin_pthread_handler_rec'
l_brace '{'
void 'void'
l_paren '('
star '*'
identifier '__routine'
r_paren ')'
l_paren '('
void 'void'
star '*'
r_paren ')'
semi ';'
void 'void'
star '*'
identifier '__arg'
semi ';'
struct 'struct'
identifier '__darwin_pthread_handler_rec'
star '*'
identifier '__next'
semi ';'
r_brace '}'
semi ';'
struct 'struct'
identifier '_opaque_pthread_attr_t'
l_brace '{'
long 'long'
identifier '__sig'
semi ';'
char 'char'
identifier '__opaque'
l_square '['
numeric_constant '36'
r_square ']'
semi ';'
r_brace '}'
semi ';'
struct 'struct'
identifier '_opaque_pthread_cond_t'
l_brace '{'
long 'long'
identifier '__sig'
semi ';'
char 'char'
identifier '__opaque'
l_square '['
numeric_constant '24'
r_square ']'
semi ';'
r_brace '}'
semi ';'
struct 'struct'
identifier '_opaque_pthread_condattr_t'
l_brace '{'
long 'long'
identifier '__sig'
semi ';'
char 'char'
identifier '__opaque'
l_square '['
numeric_constant '4'
r_square ']'
semi ';'
r_brace '}'
semi ';'
struct 'struct'
identifier '_opaque_pthread_mutex_t'
l_brace '{'
long 'long'
identifier '__sig'
semi ';'
char 'char'
identifier '__opaque'
l_square '['
numeric_constant '40'
r_square ']'
semi ';'
r_brace '}'
semi ';'
struct 'struct'
identifier '_opaque_pthread_mutexattr_t'
l_brace '{'
long 'long'
identifier '__sig'
semi ';'
char 'char'
identifier '__opaque'
l_square '['
numeric_constant '8'
r_square ']'
semi ';'
r_brace '}'
semi ';'
struct 'struct'
identifier '_opaque_pthread_once_t'
l_brace '{'
long 'long'
identifier '__sig'
semi ';'
char 'char'
identifier '__opaque'
l_square '['
numeric_constant '4'
r_square ']'
semi ';'
r_brace '}'
semi ';'
struct 'struct'
identifier '_opaque_pthread_rwlock_t'
l_brace '{'
long 'long'
identifier '__sig'
semi ';'
char 'char'
identifier '__opaque'
l_square '['
numeric_constant '124'
r_square ']'
semi ';'
r_brace '}'
semi ';'
struct 'struct'
identifier '_opaque_pthread_rwlockattr_t'
l_brace '{'
long 'long'
identifier '__sig'
semi ';'
char 'char'
identifier '__opaque'
l_square '['
numeric_constant '12'
r_square ']'
semi ';'
r_brace '}'
semi ';'
struct 'struct'
identifier '_opaque_pthread_t'
l_brace '{'
long 'long'
identifier '__sig'
semi ';'
struct 'struct'
identifier '__darwin_pthread_handler_rec'
star '*'
identifier '__cleanup_stack'
semi ';'
char 'char'
identifier '__opaque'
l_square '['
numeric_constant '596'
r_square ']'
semi ';'
r_brace '}'
semi ';'
typedef 'typedef'
identifier '__int64_t'
identifier '__darwin_blkcnt_t'
semi ';'
typedef 'typedef'
identifier '__int32_t'
identifier '__darwin_blksize_t'
semi ';'
typedef 'typedef'
identifier '__int32_t'
identifier '__darwin_dev_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
int 'int'
identifier '__darwin_fsblkcnt_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
int 'int'
identifier '__darwin_fsfilcnt_t'
semi ';'
typedef 'typedef'
identifier '__uint32_t'
identifier '__darwin_gid_t'
semi ';'
typedef 'typedef'
identifier '__uint32_t'
identifier '__darwin_id_t'
semi ';'
typedef 'typedef'
identifier '__uint64_t'
identifier '__darwin_ino64_t'
semi ';'
typedef 'typedef'
identifier '__uint32_t'
identifier '__darwin_ino_t'
semi ';'
typedef 'typedef'
identifier '__darwin_natural_t'
identifier '__darwin_mach_port_name_t'
semi ';'
typedef 'typedef'
identifier '__darwin_mach_port_name_t'
identifier '__darwin_mach_port_t'
semi ';'
typedef 'typedef'
identifier '__uint16_t'
identifier '__darwin_mode_t'
semi ';'
typedef 'typedef'
identifier '__int64_t'
identifier '__darwin_off_t'
semi ';'
typedef 'typedef'
identifier '__int32_t'
identifier '__darwin_pid_t'
semi ';'
typedef 'typedef'
struct 'struct'
identifier '_opaque_pthread_attr_t'
identifier '__darwin_pthread_attr_t'
semi ';'
typedef 'typedef'
struct 'struct'
identifier '_opaque_pthread_cond_t'
identifier '__darwin_pthread_cond_t'
semi ';'
typedef 'typedef'
struct 'struct'
identifier '_opaque_pthread_condattr_t'
identifier '__darwin_pthread_condattr_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
long 'long'
identifier '__darwin_pthread_key_t'
semi ';'
typedef 'typedef'
struct 'struct'
identifier '_opaque_pthread_mutex_t'
identifier '__darwin_pthread_mutex_t'
semi ';'
typedef 'typedef'
struct 'struct'
identifier '_opaque_pthread_mutexattr_t'
identifier '__darwin_pthread_mutexattr_t'
semi ';'
typedef 'typedef'
struct 'struct'
identifier '_opaque_pthread_once_t'
identifier '__darwin_pthread_once_t'
semi ';'
typedef 'typedef'
struct 'struct'
identifier '_opaque_pthread_rwlock_t'
identifier '__darwin_pthread_rwlock_t'
semi ';'
typedef 'typedef'
struct 'struct'
identifier '_opaque_pthread_rwlockattr_t'
identifier '__darwin_pthread_rwlockattr_t'
semi ';'
typedef 'typedef'
struct 'struct'
identifier '_opaque_pthread_t'
star '*'
identifier '__darwin_pthread_t'
semi ';'
typedef 'typedef'
identifier '__uint32_t'
identifier '__darwin_sigset_t'
semi ';'
typedef 'typedef'
identifier '__int32_t'
identifier '__darwin_suseconds_t'
semi ';'
typedef 'typedef'
identifier '__uint32_t'
identifier '__darwin_uid_t'
semi ';'
typedef 'typedef'
identifier '__uint32_t'
identifier '__darwin_useconds_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
char 'char'
identifier '__darwin_uuid_t'
l_square '['
numeric_constant '16'
r_square ']'
semi ';'
typedef 'typedef'
int 'int'
identifier '__darwin_nl_item'
semi ';'
typedef 'typedef'
int 'int'
identifier '__darwin_wctrans_t'
semi ';'
typedef 'typedef'
unsigned 'unsigned'
long 'long'
identifier '__darwin_wctype_t'
semi ';'
typedef 'typedef'
identifier '__darwin_va_list'
identifier 'va_list'
semi ';'
typedef 'typedef'
identifier '__darwin_off_t'
identifier 'off_t'
semi ';'
typedef 'typedef'
identifier '__darwin_size_t'
identifier 'size_t'
semi ';'
typedef 'typedef'
identifier '__darwin_off_t'
identifier 'fpos_t'
semi ';'
struct 'struct'
identifier '__sbuf'
l_brace '{'
unsigned 'unsigned'
char 'char'
star '*'
identifier '_base'
semi ';'
int 'int'
identifier '_size'
semi ';'
r_brace '}'
semi ';'
struct 'struct'
identifier '__sFILEX'
semi ';'
typedef 'typedef'
struct 'struct'
identifier '__sFILE'
l_brace '{'
unsigned 'unsigned'
char 'char'
star '*'
identifier '_p'
semi ';'
int 'int'
identifier '_r'
semi ';'
int 'int'
identifier '_w'
semi ';'
short 'short'
identifier '_flags'
semi ';'
short 'short'
identifier '_file'
semi ';'
struct 'struct'
identifier '__sbuf'
identifier '_bf'
semi ';'
int 'int'
identifier '_lbfsize'
semi ';'
void 'void'
star '*'
identifier '_cookie'
semi ';'
int 'int'
l_paren '('
star '*'
identifier '_close'
r_paren ')'
l_paren '('
void 'void'
star '*'
r_paren ')'
semi ';'
int 'int'
l_paren '('
star '*'
identifier '_read'
r_paren ')'
l_paren '('
void 'void'
star '*'
comma ','
char 'char'
star '*'
comma ','
int 'int'
r_paren ')'
semi ';'
identifier 'fpos_t'
l_paren '('
star '*'
identifier '_seek'
r_paren ')'
l_paren '('
void 'void'
star '*'
comma ','
identifier 'fpos_t'
comma ','
int 'int'
r_paren ')'
semi ';'
int 'int'
l_paren '('
star '*'
identifier '_write'
r_paren ')'
l_paren '('
void 'void'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
int 'int'
r_paren ')'
semi ';'
struct 'struct'
identifier '__sbuf'
identifier '_ub'
semi ';'
struct 'struct'
identifier '__sFILEX'
star '*'
identifier '_extra'
semi ';'
int 'int'
identifier '_ur'
semi ';'
unsigned 'unsigned'
char 'char'
identifier '_ubuf'
l_square '['
numeric_constant '3'
r_square ']'
semi ';'
unsigned 'unsigned'
char 'char'
identifier '_nbuf'
l_square '['
numeric_constant '1'
r_square ']'
semi ';'
struct 'struct'
identifier '__sbuf'
identifier '_lb'
semi ';'
int 'int'
identifier '_blksize'
semi ';'
identifier 'fpos_t'
identifier '_offset'
semi ';'
r_brace '}'
identifier 'FILE'
semi ';'
extern 'extern'
identifier 'FILE'
star '*'
identifier '__stdinp'
semi ';'
extern 'extern'
identifier 'FILE'
star '*'
identifier '__stdoutp'
semi ';'
extern 'extern'
identifier 'FILE'
star '*'
identifier '__stderrp'
semi ';'
void 'void'
identifier 'clearerr'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'fclose'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'feof'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'ferror'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'fflush'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'fgetc'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'fgetpos'
l_paren '('
identifier 'FILE'
star '*'
comma ','
identifier 'fpos_t'
star '*'
r_paren ')'
semi ';'
char 'char'
star '*'
identifier 'fgets'
l_paren '('
char 'char'
star '*'
comma ','
int 'int'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
identifier 'FILE'
star '*'
identifier 'fopen'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'fprintf'
l_paren '('
identifier 'FILE'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
ellipsis '...'
r_paren ')'
semi ';'
int 'int'
identifier 'fputc'
l_paren '('
int 'int'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'fputs'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
asm '__asm'
l_paren '('
string_literal '"_"'
string_literal '"fputs"'
string_literal '"$UNIX2003"'
r_paren ')'
semi ';'
identifier 'size_t'
identifier 'fread'
l_paren '('
void 'void'
star '*'
comma ','
identifier 'size_t'
comma ','
identifier 'size_t'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
identifier 'FILE'
star '*'
identifier 'freopen'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
asm '__asm'
l_paren '('
string_literal '"_"'
string_literal '"freopen"'
string_literal '"$UNIX2003"'
r_paren ')'
semi ';'
int 'int'
identifier 'fscanf'
l_paren '('
identifier 'FILE'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
ellipsis '...'
r_paren ')'
semi ';'
int 'int'
identifier 'fseek'
l_paren '('
identifier 'FILE'
star '*'
comma ','
long 'long'
comma ','
int 'int'
r_paren ')'
semi ';'
int 'int'
identifier 'fsetpos'
l_paren '('
identifier 'FILE'
star '*'
comma ','
const 'const'
identifier 'fpos_t'
star '*'
r_paren ')'
semi ';'
long 'long'
identifier 'ftell'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
identifier 'size_t'
identifier 'fwrite'
l_paren '('
const 'const'
void 'void'
star '*'
comma ','
identifier 'size_t'
comma ','
identifier 'size_t'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
asm '__asm'
l_paren '('
string_literal '"_"'
string_literal '"fwrite"'
string_literal '"$UNIX2003"'
r_paren ')'
semi ';'
int 'int'
identifier 'getc'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'getchar'
l_paren '('
void 'void'
r_paren ')'
semi ';'
char 'char'
star '*'
identifier 'gets'
l_paren '('
char 'char'
star '*'
r_paren ')'
semi ';'
extern 'extern'
const 'const'
int 'int'
identifier 'sys_nerr'
semi ';'
extern 'extern'
const 'const'
char 'char'
star '*'
const 'const'
identifier 'sys_errlist'
l_square '['
r_square ']'
semi ';'
void 'void'
identifier 'perror'
l_paren '('
const 'const'
char 'char'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'printf'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
ellipsis '...'
r_paren ')'
semi ';'
int 'int'
identifier 'putc'
l_paren '('
int 'int'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'putchar'
l_paren '('
int 'int'
r_paren ')'
semi ';'
int 'int'
identifier 'puts'
l_paren '('
const 'const'
char 'char'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'remove'
l_paren '('
const 'const'
char 'char'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'rename'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
r_paren ')'
semi ';'
void 'void'
identifier 'rewind'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'scanf'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
ellipsis '...'
r_paren ')'
semi ';'
void 'void'
identifier 'setbuf'
l_paren '('
identifier 'FILE'
star '*'
comma ','
char 'char'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'setvbuf'
l_paren '('
identifier 'FILE'
star '*'
comma ','
char 'char'
star '*'
comma ','
int 'int'
comma ','
identifier 'size_t'
r_paren ')'
semi ';'
int 'int'
identifier 'sprintf'
l_paren '('
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
ellipsis '...'
r_paren ')'
semi ';'
int 'int'
identifier 'sscanf'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
ellipsis '...'
r_paren ')'
semi ';'
identifier 'FILE'
star '*'
identifier 'tmpfile'
l_paren '('
void 'void'
r_paren ')'
semi ';'
char 'char'
star '*'
identifier 'tmpnam'
l_paren '('
char 'char'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'ungetc'
l_paren '('
int 'int'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'vfprintf'
l_paren '('
identifier 'FILE'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
identifier 'va_list'
r_paren ')'
semi ';'
int 'int'
identifier 'vprintf'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
identifier 'va_list'
r_paren ')'
semi ';'
int 'int'
identifier 'vsprintf'
l_paren '('
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
identifier 'va_list'
r_paren ')'
semi ';'
int 'int'
identifier 'asprintf'
l_paren '('
char 'char'
star '*'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
ellipsis '...'
r_paren ')'
semi ';'
int 'int'
identifier 'vasprintf'
l_paren '('
char 'char'
star '*'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
identifier 'va_list'
r_paren ')'
semi ';'
char 'char'
star '*'
identifier 'ctermid'
l_paren '('
char 'char'
star '*'
r_paren ')'
semi ';'
char 'char'
star '*'
identifier 'ctermid_r'
l_paren '('
char 'char'
star '*'
r_paren ')'
semi ';'
identifier 'FILE'
star '*'
identifier 'fdopen'
l_paren '('
int 'int'
comma ','
const 'const'
char 'char'
star '*'
r_paren ')'
semi ';'
char 'char'
star '*'
identifier 'fgetln'
l_paren '('
identifier 'FILE'
star '*'
comma ','
identifier 'size_t'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'fileno'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
void 'void'
identifier 'flockfile'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
const 'const'
char 'char'
star '*'
identifier 'fmtcheck'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'fpurge'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'fseeko'
l_paren '('
identifier 'FILE'
star '*'
comma ','
identifier 'off_t'
comma ','
int 'int'
r_paren ')'
semi ';'
identifier 'off_t'
identifier 'ftello'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'ftrylockfile'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
void 'void'
identifier 'funlockfile'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'getc_unlocked'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'getchar_unlocked'
l_paren '('
void 'void'
r_paren ')'
semi ';'
int 'int'
identifier 'getw'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'pclose'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
identifier 'FILE'
star '*'
identifier 'popen'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'putc_unlocked'
l_paren '('
int 'int'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'putchar_unlocked'
l_paren '('
int 'int'
r_paren ')'
semi ';'
int 'int'
identifier 'putw'
l_paren '('
int 'int'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
void 'void'
identifier 'setbuffer'
l_paren '('
identifier 'FILE'
star '*'
comma ','
char 'char'
star '*'
comma ','
int 'int'
r_paren ')'
semi ';'
int 'int'
identifier 'setlinebuf'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier 'snprintf'
l_paren '('
char 'char'
star '*'
comma ','
identifier 'size_t'
comma ','
const 'const'
char 'char'
star '*'
comma ','
ellipsis '...'
r_paren ')'
semi ';'
char 'char'
star '*'
identifier 'tempnam'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
r_paren ')'
asm '__asm'
l_paren '('
string_literal '"_"'
string_literal '"tempnam"'
string_literal '"$UNIX2003"'
r_paren ')'
semi ';'
int 'int'
identifier 'vfscanf'
l_paren '('
identifier 'FILE'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
identifier 'va_list'
r_paren ')'
semi ';'
int 'int'
identifier 'vscanf'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
identifier 'va_list'
r_paren ')'
semi ';'
int 'int'
identifier 'vsnprintf'
l_paren '('
char 'char'
star '*'
comma ','
identifier 'size_t'
comma ','
const 'const'
char 'char'
star '*'
comma ','
identifier 'va_list'
r_paren ')'
semi ';'
int 'int'
identifier 'vsscanf'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
identifier 'va_list'
r_paren ')'
semi ';'
identifier 'FILE'
star '*'
identifier 'zopen'
l_paren '('
const 'const'
char 'char'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
int 'int'
r_paren ')'
semi ';'
identifier 'FILE'
star '*'
identifier 'funopen'
l_paren '('
const 'const'
void 'void'
star '*'
comma ','
int 'int'
l_paren '('
star '*'
r_paren ')'
l_paren '('
void 'void'
star '*'
comma ','
char 'char'
star '*'
comma ','
int 'int'
r_paren ')'
comma ','
int 'int'
l_paren '('
star '*'
r_paren ')'
l_paren '('
void 'void'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
int 'int'
r_paren ')'
comma ','
identifier 'fpos_t'
l_paren '('
star '*'
r_paren ')'
l_paren '('
void 'void'
star '*'
comma ','
identifier 'fpos_t'
comma ','
int 'int'
r_paren ')'
comma ','
int 'int'
l_paren '('
star '*'
r_paren ')'
l_paren '('
void 'void'
star '*'
r_paren ')'
r_paren ')'
semi ';'
int 'int'
identifier '__srget'
l_paren '('
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
int 'int'
identifier '__svfscanf'
l_paren '('
identifier 'FILE'
star '*'
comma ','
const 'const'
char 'char'
star '*'
comma ','
identifier 'va_list'
r_paren ')'
semi ';'
int 'int'
identifier '__swbuf'
l_paren '('
int 'int'
comma ','
identifier 'FILE'
star '*'
r_paren ')'
semi ';'
static 'static'
inline '__inline'
int 'int'
identifier '__sputc'
l_paren '('
int 'int'
identifier '_c'
comma ','
identifier 'FILE'
star '*'
identifier '_p'
r_paren ')'
l_brace '{'
if 'if'
l_paren '('
minusminus '--'
identifier '_p'
arrow '->'
identifier '_w'
greaterequal '>='
numeric_constant '0'
pipepipe '||'
l_paren '('
identifier '_p'
arrow '->'
identifier '_w'
greaterequal '>='
identifier '_p'
arrow '->'
identifier '_lbfsize'
ampamp '&&'
l_paren '('
char 'char'
r_paren ')'
identifier '_c'
exclaimequal '!='
char_constant ''\n''
r_paren ')'
r_paren ')'
return 'return'
l_paren '('
star '*'
identifier '_p'
arrow '->'
identifier '_p'
plusplus '++'
equal '='
identifier '_c'
r_paren ')'
semi ';'
else 'else'
return 'return'
l_paren '('
identifier '__swbuf'
l_paren '('
identifier '_c'
comma ','
identifier '_p'
r_paren ')'
r_paren ')'
semi ';'
r_brace '}'
int 'int'
identifier 'main'
l_paren '('
r_paren ')'
l_brace '{'
identifier 'printf'
l_paren '('
string_literal '"Hello, world\n"'
r_paren ')'
semi ';'
r_brace '}'
eof ''
./tut04 input03.c

*** Identifier Table Stats:
# Identifiers:   83
# Empty Buckets: 8109
Hash density (#identifiers per bucket): 0.010132
Ave identifier length: 8.084337
Max identifier length: 28

Number of memory regions: 1
Bytes allocated: 1901
./tut05 input04.c
Found global user declarator a
Found global user declarator a
Found global user declarator b
Found global user declarator c
Found global user declarator funcp
Found global user declarator fp2
Found global user declarator fp3
Found global user declarator f
Found global user declarator f2
Found global user declarator t
./tut06 input04.c
Read top-level variable decl: 'a'
Read top-level variable decl: 'a'
Read top-level variable decl: 'b'
Read top-level variable decl: 'c'
Read top-level variable decl: 'funcp'
Read top-level variable decl: 'fp2'
Read top-level variable decl: 'fp3'
Read top-level variable decl: 't'
./tut07 -DTEST input05.c | tee input05.html
defining TEST
<h2><code>input05.c</code></h2>

<pre><code>input05.c: test
input05.c: static staticvar
input05.c: a
input05.c: a
input05.c: b
input05.c: c
input05.c: funcp
input05.c: fp2
input05.c: fp3
input05.c: t
</pre></code>


./tut08 -DTEST input06.c
defining TEST
<h2><code>input06.c</code></h2>

<pre><code><span class="global">input06.c: test  (0 local uses)
</span><span class="uses"></span><span class="global">input06.c: static staticvar  (2 local uses)
</span><span class="uses">  main:48
  main:50
</span><span class="global">input06.c: a  (0 local uses)
</span><span class="uses"></span><span class="global">input06.c: a  (0 local uses)
</span><span class="uses"></span><span class="global">input06.c: test2  (1 local uses)
</span><span class="uses">  main:46
</span><span class="global">input06.c: anothervar  (1 local uses)
</span><span class="uses">  main:50
</span><span class="global">input06.c: b  (0 local uses)
</span><span class="uses"></span><span class="global">input06.c: funcp  (0 local uses)
</span><span class="uses"></span><span class="global">input06.c: fp2  (0 local uses)
</span><span class="uses"></span><span class="global">input06.c: fp3  (0 local uses)
</span><span class="uses"></span><span class="global">input06.c: t  (0 local uses)
</span><span class="uses"></span></code></pre>


./tut09 -o input07_1.o input07_1.c
./tut09 -o input07_2.o input07_2.c
./tut09 -o input07.html input07_1.o input07_2.o
cat input07.html
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Global variables</title>

<style type="text/css">
body {
  font-family: Utopia, Georgia, Times, serif;
}
.global {
  background-color: #f6f6f6;
  border: 1px solid #cccccc;
  margin-bottom: 10px;
  margin-left: 0px;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
  
}
.head {
  line-height: 100%;
  padding-top: 10px;
  padding-left: 5px;
}
.head:hover {
  cursor: pointer;
  background-color: #ffffe0;
}
.name {
  font-size: 24px;
}
.totalcount {
  font-size: 12px;
  margin-left: 5px;
  color: #888888;
}
.filecount {
  font-size: 12px;
  color: #888888;
}
.defineinfo {
  display: block;
  font-size: 12px;
  color: #888888;
}
.file {
  padding-left: 5px;
}
.file:hover {
  background-color: #ffffe0;
  cursor: pointer;
}
.uses {
  padding-top: 3px;
  border-top: 1px solid #cccccc;
}
pre {
  margin: 0px;
  padding-left: 5px;
  margin-bottom: 6px;
}
</style>

<script type="text/javascript"
  src="http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js">
</script>
<script type="text/javascript">
$(document).ready(function() {
  $('div.usefile + div.usefile > pre').hide();  /* don't hide first file */
  $('.file').click(function() {
    $(this).next().slideToggle();
  });
  $('.uses').hide();
  $('.head').click(function() {
    $(this).next().slideToggle();
  });
  $('a#toggle').click(function() {
    $('.static').toggle();
    if ($(this).text() == 'Show static globals')
      $(this).text('Hide static globals')
    else
      $(this).text('Show static globals')
    return false;
  });
});
</script>
</head>
<body>
<!--<h2>TODO</h2>
<ul>
  <li>Sort by usage/name</li>
  <li>types of globals?</li>
  <li>show declaring code?</li>
  <li>show code lines that use globals?</li>
  <li>Index at the right-hand side?</li>
</ul>-->
<h1>Globals</h1>

<a href="" id="toggle">Hide static globals</a>
<p>6 globals defined, 3 of them are <code>static</code>.</p>
<div class="global">
<div class="head"><code class="name">bla</code><span class="totalcount"> (3 uses in 2 translation units)</span>
<span class="defineinfo">defined in translation unit input07_1.c, declared in ./input07.h:4</span></div>
<div class="uses"><div class="usefile"><div class="file"><span class="filename">input07_1.c</span><span class="filecount"> (1 use)</span></div>
<pre><code>  f():
  <a href="mvim://open?line=12&url=file:///Users/nico/src/clangtut/input07_1.c">12</a>:   int u = bla;
</code></pre></div><div class="usefile"><div class="file"><span class="filename">input07_2.c</span><span class="filecount"> (2 uses)</span></div>
<pre><code>  g():
  <a href="mvim://open?line=15&url=file:///Users/nico/src/clangtut/input07_2.c">15</a>:   int u = bla;
  <a href="mvim://open?line=19&url=file:///Users/nico/src/clangtut/input07_2.c">19</a>:   printf("%d", 0?(1?bla:blah):1);
</code></pre></div></div></div>

<div class="global static">
<div class="head"><code class="name">blah</code><span class="totalcount"> (2 uses in 1 translation unit)</span>
<span class="defineinfo">defined static in translation unit input07_2.c, declared in input07_2.c:8</span></div>
<div class="uses"><div class="usefile"><div class="file"><span class="filename">input07_2.c</span><span class="filecount"> (2 uses)</span></div>
<pre><code>  g():
  <a href="mvim://open?line=16&url=file:///Users/nico/src/clangtut/input07_2.c">16</a>:   int v = blah;
  <a href="mvim://open?line=19&url=file:///Users/nico/src/clangtut/input07_2.c">19</a>:   printf("%d", 0?(1?bla:blah):1);
</code></pre></div></div></div>

<div class="global">
<div class="head"><code class="name">blah</code><span class="totalcount"> (1 use in 1 translation unit)</span>
<span class="defineinfo">defined in translation unit input07_1.c, declared in input07_1.c:6</span></div>
<div class="uses"><div class="usefile"><div class="file"><span class="filename">input07_1.c</span><span class="filecount"> (1 use)</span></div>
<pre><code>  f():
  <a href="mvim://open?line=13&url=file:///Users/nico/src/clangtut/input07_1.c">13</a>:   int v = blah;
</code></pre></div></div></div>

<div class="global">
<div class="head"><code class="name">blubb</code><span class="totalcount"> (1 use in 1 translation unit)</span>
<span class="defineinfo">defined in translation unit input07_2.c, declared in input07_2.c:9</span></div>
<div class="uses"><div class="usefile"><div class="file"><span class="filename">input07_2.c</span><span class="filecount"> (1 use)</span></div>
<pre><code>  g():
  <a href="mvim://open?line=17&url=file:///Users/nico/src/clangtut/input07_2.c">17</a>:   int w = blubb;
</code></pre></div></div></div>

<div class="global static">
<div class="head"><code class="name">static_h</code><span class="totalcount"> (1 use in 1 translation unit)</span>
<span class="defineinfo">defined static in translation unit input07_1.c, declared in ./input07.h:2</span></div>
<div class="uses"><div class="usefile"><div class="file"><span class="filename">input07_1.c</span><span class="filecount"> (1 use)</span></div>
<pre><code>  f():
  <a href="mvim://open?line=10&url=file:///Users/nico/src/clangtut/input07_1.c">10</a>:   int s = static_h;
</code></pre></div></div></div>

<div class="global static">
<div class="head"><code class="name">static_h</code><span class="totalcount"> (1 use in 1 translation unit)</span>
<span class="defineinfo">defined static in translation unit input07_2.c, declared in ./input07.h:2</span></div>
<div class="uses"><div class="usefile"><div class="file"><span class="filename">input07_2.c</span><span class="filecount"> (1 use)</span></div>
<pre><code>  g():
  <a href="mvim://open?line=13&url=file:///Users/nico/src/clangtut/input07_2.c">13</a>:   int s = static_h;
</code></pre></div></div></div>

</body>
</html>
